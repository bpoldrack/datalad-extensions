#!/usr/bin/env python3

import os
import os.path as op
import glob
import sys
import yaml

import jinja2

top_path = op.dirname(op.dirname(__file__))

# TODO: proper logigng etc

def log(msg, *args):
    print(msg % args)


class ExtensionSpec(dict):

    @property
    def name(self):
        return self["name"]

    # Some properties which might tune the value
    @property
    def github(self):
        return self.get("github", self.name.replace("_", "-"))

    @property
    def githubdash(self):
        return self.github.replace("_", "-")

    @property
    def pypi(self):
        return self.get("pypi", self.name)

    @property
    def package(self):
        return self.get("package", self.name)

    @property
    def conda(self):
        return self.get('conda', self.package.replace('_', '-'))

    @property
    def apt_depends(self):
        return self.get("apt_depends", [])

    #def __getattribute__(self, item):
    #    return self[item]


def jinja_render(tmpl, **kwargs):
    """Custom renderer, so we first replace github actions ${{ with a
    custom placeholder to avoid jinja tying to handle it
    """
    PLACEHOLDER = "[[["
    if PLACEHOLDER in tmpl:
        raise RuntimeError(
            "Detected placeholder %r already being present in the text"
            % PLACEHOLDER
        )
    tmpl_ = tmpl.replace("${{", PLACEHOLDER)
    out_ = jinja2.Template(tmpl_).render(**kwargs)
    return out_.replace(PLACEHOLDER, "${{")


def process_extension(ext_spec):
    render_kwargs = {
        "extension": ext_spec,
    }

    # TODO: proper recursive
    templates_dir = op.join(top_path, 'templates')
    for tmpl_p in glob.glob(op.join(templates_dir, '.github/*/*')):
        p = jinja_render(tmpl_p, **render_kwargs)
        if p == tmpl_p:
            log("Skipping %s since seems to be not extension specific", tmpl_p)
            continue

        with open(tmpl_p) as f:
            tmpl = f.read()
        rendered = jinja_render(tmpl, **render_kwargs)

        if rendered == tmpl:
            raise RuntimeError(
                f"Rendered version of {tmpl_p} content is the same as template. "
                "At the moment it is not expected"
            )

        prel_target = op.relpath(p, templates_dir)
        p_target = op.join(top_path, prel_target)
        if not op.exists(op.dirname(p_target)):
            os.makedirs(op.dirname(p_target))

        with open(p_target, "w") as f:
            f.write(rendered)

        log("Rendered %s", prel_target)


def generate_README(ext_specs):
    with open(op.join(top_path, "README.md"), "w") as f:
        f.write("""\
## DataLad Status

 [![DataLad GitHub release](https://img.shields.io/github/release/datalad/datalad.svg)](https://GitHub.com/datalad/datalad/releases/)
 [![DataLad PyPI version fury.io](https://badge.fury.io/py/datalad.svg)](https://pypi.python.org/pypi/datalad/)
 ![DataLad Conda](https://anaconda.org/conda-forge/datalad/badges/version.svg)
 - CI:
   [![Travis tests status](https://secure.travis-ci.org/datalad/datalad.png?branch=master)](https://travis-ci.org/datalad/datalad)
   [![Build status](https://ci.appveyor.com/api/projects/status/github/datalad/datalad?branch=master&svg=true)](https://ci.appveyor.com/project/mih/datalad/branch/master)
   [![Documentation](https://readthedocs.org/projects/datalad/badge/?version=latest)](http://datalad.rtfd.org)
 - Misc:
   [![codecov.io](https://codecov.io/github/datalad/datalad/coverage.svg?branch=master)](https://codecov.io/github/datalad/datalad?branch=master)

## DataLad Extensions Status

""")

        # TODO: link to per-extension cron-github-CI results
        https_extension = "https://github.com/datalad/datalad-extensions"
        for ext, e in ext_specs.items():
            f.write(f"- [{ext}](https://github.com/datalad/{e.github}): "
                    f'   [![GitHub release](https://img.shields.io/github/release/datalad/{e.githubdash}.svg)](https://GitHub.com/datalad/{e.githubdash}/releases/)\n'
                    f'   [![PyPI version fury.io](https://badge.fury.io/py/{e.pypi}.svg)](https://pypi.python.org/pypi/{e.pypi}/)\n'
                    f'   ![Conda](https://anaconda.org/conda-forge/{e.conda}/badges/version.svg)\n'
                    f'  - CIs:\n'
                    f'    - Released + DataLad master:'
                    f'    [![Released+DataLad master]({https_extension}/workflows/test-{ext}/badge.svg)]({https_extension}/actions?query=workflow%3Atest-{ext})\n'
                    f'    - master + Released DataLad: [![master+Released Datalad](https://secure.travis-ci.org/datalad/{e.githubdash}.png?branch=master)](https://travis-ci.org/datalad/{e.githubdash})\n'
                    f'  - Misc: [![codecov.io](https://codecov.io/github/datalad/{e.githubdash}/coverage.svg?branch=master)](https://codecov.io/github/datalad/{e.githubdash}?branch=master)\n'
                    f'   [![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/datalad/{e.githubdash}.svg)](http://isitmaintained.com/project/datalad/{e.githubdash} "Average time to resolve an issue")\n'
                    f'   [![Percentage of issues still open](http://isitmaintained.com/badge/open/datalad/{e.githubdash}.svg)](http://isitmaintained.com/project/datalad/{e.githubdash} "Percentage of issues still open")\n'

                    # [![DOI](
                    # https://zenodo.org/badge/DOI/10.5281/zenodo.3368666.svg
                    # )](https://doi.org/10.5281/zenodo.3368666)
                    # f"[![Documentation](https://readthedocs.org/projects/{
                    # e.github}/badge/?version=latest)](http://{e.github}.rtfd.org)"
                    # f"[![License: MIT](
                    # https://img.shields.io/badge/License-MIT-yellow.svg)](
                    # https://opensource.org/licenses/MIT) 
                    '\n'
                    )


def main(extensions):
    ext_specs = load_ext_specs()

    for ext in extensions or list(ext_specs):
        process_extension(ext_specs[ext])

    # We generate/update README.md for all extensions for now
    generate_README(ext_specs)


def load_ext_specs():
    with open(op.join(top_path, "extensions.yaml")) as f:
        spec = yaml.load(f.read(), Loader=yaml.BaseLoader)
    # ATM expecting only a single structure
    assert list(spec.keys()) == ['extensions']
    ext_specs = spec["extensions"]
    for ext in list(ext_specs):
        if not ext_specs[ext]: # Was None
            # If it had nothing -- prepare it to be a dict
            ext_specs[ext] = {}
        ext_spec = ext_specs[ext] \
            = ExtensionSpec(**ext_specs[ext])
        ext_spec["name"] = ext
    return ext_specs


if __name__ == "__main__":
    main(sys.argv[1:])